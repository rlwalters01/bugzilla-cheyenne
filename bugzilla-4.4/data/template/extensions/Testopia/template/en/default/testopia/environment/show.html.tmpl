use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1338251990',
        'name' => 'testopia/environment/show.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n  ";
#line 27 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
#line 28 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    $output .=  $context->process('testopia/style.none.tmpl');
#line 29 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    $output .=  $context->process('testopia/blocks.html.tmpl');
    $output .=  "\n";
#line 31 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    $stash->set('title', 'Environment Editor');
    $output .=  "\n";
#line 33 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl');
    $output .=  "\n\n<style type = \"text/css\"> \n.product .x-tree-node-icon{\nbackground:url(extensions/Testopia/img/product.gif);\n}\n.product .x-tree-node-icon{\nbackground:url(extensions/Testopia/img/product.gif);\n}\n.element .x-tree-node-icon{\nbackground:url(extensions/Testopia/img/element.gif);\n}\n.property .x-tree-node-icon{\nbackground:url(extensions/Testopia/img/property.gif);\n}\n.category .x-tree-node-icon{\nbackground:url(extensions/Testopia/img/category.gif);\n}\n.validexp .x-tree-node-icon{\nbackground:url(extensions/Testopia/img/validexpRed.png);\n}\n.validexpYellow .x-tree-node-icon{\nbackground:url(extensions/Testopia/img/validexpYellow.png);\n}\n</style> \n\n<script type=\"text/javascript\">\nExt.onReady(function(){\n    var Tree = Ext.tree;\n    var testopia_form = new Ext.form.BasicForm('testopia_helper_frm');\n/*\n * etree - Environment Tree Panel\n *     This panel represents the environment\n */               \n    var etree = new Tree.TreePanel({\n        animate: true,\n        autoScroll: true,\n        enableDD:true,\n        containerScroll: true,\n        region: 'center',\n        title: 'Editing Environment ";
#line 73 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "',\n        split: true,\n        id: 'environment_tree',\n        root: new Tree.AsyncTreeNode({\n            text: '";
#line 77 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "',\n            draggable:false,\n            id: '";
#line 79 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    $output .=  $stash->get(['environment', 0, 'id', 0]);
    $output .=  "',\n            type: 'environment'\n        }),\n        dropConfig :{allowContainerDrop: true},\n        loader: new Tree.TreeLoader({\n            url: \"tr_environments.cgi\",\n            listeners: {'beforeload':function(l, node) {\n                 l.baseParams.action = 'getChildren'; \n                 l.baseParams.tree_type = 'env';\n                 l.baseParams.type = node.attributes.type;\n                 l.baseParams.env_id = ";
#line 89 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ";\n            }}\n        }),\n        listeners:{\n            \"textchange\": function(node, text, oldText){\n                var httpRequest = new Ext.data.Connection();\n                httpRequest.request({\n                    url: 'tr_environments.cgi', \n                    params:{\n                        action: 'rename',\n                        name: text, \n                        env_id: node.id,\n                        isactive: true\n                    }, \n                    success:function(object){\n                        Testopia.Util.notify.msg('Test Environment Updated', 'Environment renamed successfully');\n                    }, \n                    failure: Testopia.Util.error\n                });      \n            },\n            \"contextmenu\": function(node, event){\n                node.getOwnerTree().getSelectionModel().select(node);\n                this.menu = new Ext.menu.Menu({\n                    id: 'etree_menu', \n                    items: [{\n                        text: 'Remove Element',\n                        disabled: true,\n                        id: 'etree_remove_node', \n                        handler: function (){\n                            Ext.Msg.show({\n                                title: 'Remove Selected Elements', \n                                msg: 'Are you sure?',\n                                buttons: Ext.MessageBox.YESNO,\n                                icon: Ext.MessageBox.QUESTION,\n                                fn: function(btn, text){\n                                    if (btn == 'yes'){\n                                        var elements = [];\n                                        if(node.attributes.type == 'category'){\n                                            node.eachChild(function(n){\n                                                if (n.attributes.type == 'element')\n                                                    elements.push(n.id);\n                                            });\n                                        }\n                                        else {\n                                            elements.push(node.id);\n                                        }\n                                        testopia_form.submit({\n                                            url: 'tr_environments.cgi', \n                                            params:{\n                                                action: 'remove_env_node',\n                                                element_ids: elements.join(','), \n                                                env_id: ";
#line 140 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n                                            }, \n                                            success:function(f,a){\n                                                if(node != null)\n                                                    node.remove();\n                                            }, \n                                            failure: Testopia.Util.error\n                                        });      \n                                    }\n                                }\n                            });\n                        }          \n                    },{\n                        text: 'Rename Environment',\n                        hidden: true,\n                        id: 'etree_rename_env',\n                        handler: function(){\n                            environmentTreeEditor.startEdit(etree.root.ui.textNode);\n                        }\n                    },{\n                        text: 'Mark this value \"Selected\"',\n                        hidden: true,\n                        id: 'etree_value_selector',\n                        handler: function(){\n                            testopia_form.submit({\n                                url: 'tr_environments.cgi', \n                                params:{\n                                    action: 'set_selected',\n                                    id: node.attributes.property_id,\n                                    type: node.attributes.cls, \n                                    env_id: ";
#line 170 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ",\n                                    value: node.attributes.text\n                                }, \n                                success:function(object){\n                                    var parentNode = node.parentNode;\n                                    var children = parentNode.childNodes;\n                                    for(i=0; i<children.length; i++){\n                                        c = children[i].getUI();\n                                        c.removeClass([\"validexpYellow\"]);\n                                        c.addClass([\"validexp\"]);\n                                    }\n                                    c = node.getUI();\n                                    c.removeClass([\"validexp\"]);\n                                    c.addClass([\"validexpYellow\"]);             \n                                }, \n                                failure: Testopia.Util.error\n                            }); \n                        }\n                    },{\n                        text: 'Refresh',\n                        handler: function(){\n                            node.getOwnerTree().getLoader().load(node);\n                        }\n                    }]\n                });\n                    \n                Ext.getCmp('etree_remove_node').disable();\n                Ext.getCmp('etree_value_selector').hide();\n                Ext.getCmp('etree_rename_env').hide();\n                if (node.attributes.type == 'category' || (node.attributes.type == 'element' && node.getDepth() <= 2)) {\n                    Ext.getCmp('etree_remove_node').enable();\n                }\n                else \n                    if (node.attributes.type == 'value') {\n                        Ext.getCmp('etree_value_selector').show();\n                    }\n                    else \n                        if (node.attributes.type == 'environment') {\n                            Ext.getCmp('etree_rename_env').show();\n                        }\n                    \n                this.menu.showAt([event.getPageX(), event.getPageY()]);\n            }\n        }\n    });\n    \n/*\n * vtree - Variables Tree Panel\n *     This panel represents the environment variables\n */               \n    var vtree = new Tree.TreePanel({\n        animate: true,\n        autoScroll: true,\n        enableDD:true,\n        containerScroll: true,\n        region: 'north',\n        title: 'Environment Items',\n        split: true,\n        height: 300,\n        collapsible: true,\n        rootVisible: false,\n        id: 'variable_tree',\n        loader: new Tree.TreeLoader({\n            url: \"tr_environments.cgi\",\n            listeners: {\"beforeload\": function(l, node) {\n                 l.baseParams.action = 'getChildren';\n                 l.baseParams.tree_type = 'var'; \n                 l.baseParams.type = node.attributes.type;\n                 l.baseParams.env_id = ";
#line 238 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ";\n           }}\n        }),\n        root: new Tree.AsyncTreeNode({\n            text: 'root',\n            draggable: false,\n            id:'0',\n            action: 'getChildren',\n            type: 'root',\n            env_id: '0'               \n        }),\n        listeners: {\n            \"textchange\": editNode,\n            \"contextmenu\": ctxMenu\n        }\n    });\n    var ptree = new Tree.TreePanel({\n        animate: true,\n        autoScroll: true,\n        enableDD:true,\n        containerScroll: true,\n        region: 'center',\n        title: 'Product \"";
#line 260 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'product', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" Items',\n        split: true,\n        width: '300',\n        collapsible: true,\n        rootVisible: false,\n        id: 'prod_variable_tree',\n        loader: new Tree.TreeLoader({\n            url: \"tr_environments.cgi\",\n            listeners: {\"beforeload\": function(l, node) {\n                 l.baseParams.action = 'getChildren';\n                 l.baseParams.tree_type = 'var'; \n                 l.baseParams.type = node.attributes.type;\n                 l.baseParams.env_id = ";
#line 272 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ";\n           }}\n        }),\n        root: new Tree.AsyncTreeNode({\n            text: 'root',\n            draggable: false,\n            id: ";
#line 278 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'product_id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ",\n            type: 'root'\n        }),\n        listeners: {\n            \"textchange\": editNode,\n            \"contextmenu\": ctxMenu\n        }\n    });\n\n/*\n * Tree Editor defs\n */   \n    var environmentTreeEditor = new Tree.TreeEditor(etree, {id: 'etree_editor'});\n    environmentTreeEditor.cancelOnEscape = true;\n    environmentTreeEditor.ignoreNoChange = true;\n    environmentTreeEditor.completeOnEnter = true;\n    environmentTreeEditor.autosize = true;\n\n    var itemTreeEditor = new Tree.TreeEditor(vtree, {id: 'vtree_editor'});\n    itemTreeEditor.cancelOnEscape = true;\n    itemTreeEditor.ignoreNoChange = true;\n    itemTreeEditor.completeOnEnter = true;\n    itemTreeEditor.autosize = true;\n\n    var productTreeEditor = new Tree.TreeEditor(ptree, {id: 'vtree_editor'});\n    productTreeEditor.cancelOnEscape = true;\n    productTreeEditor.ignoreNoChange = true;\n    productTreeEditor.completeOnEnter = true;\n    productTreeEditor.autosize = true;\n\n    \n/*\n * Functions\n */\n\n    function editNode(node, text, oldText){\n        var id = node.attributes.id; \n        var type = node.attributes.type;\n        \n        testopia_form.submit({\n            url: 'tr_environments.cgi', \n            params:{\n                action: 'edit',\n                text: text, \n                oldtext: oldText,\n                id: node.attributes.property_id || node.attributes.id, \n                type: node.attributes.cls\n            }, \n            success:function(f,a){\n                Testopia.Util.notify.msg('Environment' + type + 'Updated', type + ' renamed successfully');\n            }, \n            failure: Testopia.Util.error\n        });      \n    }\n    \n    \n    function expandCallBack(node){\n        var children = node.childNodes;\n        for(i=0;i<children.length;i++){\n            var child = children[i];\n            checkAndRemoveNode(child);                     \n        }\n        node.remove();\n        return;        \n    }\n        \n    function checkAndRemoveNode(node){\n        if(node.attributes.type != 'element')\n            return;\n        if(node.getDepth() > 2)\n            return;\n        \n        var item = {};\n        item.id = node.attributes.id; \n        item.type = node.attributes.type; \n        deleteNode(item);\n    }       \n    \n    function ctxMenu (node, event){\n            ctxmenu = new Ext.menu.Menu({\n                id: 'variable_ctx_menu',\n                items: [{\n                    text: 'New Category',\n                    id: 'add_category_mnu',\n                    hidden: true,\n                    nodeId: node.attributes.id, \n                    type: node.attributes.type,\n                    handler: addNode.createDelegate(this, [node, 'category'])          \n                },{\n                    text: 'New Element',\n                    id: 'add_element_mnu',\n                    hidden: true,\n                    nodeId: node.attributes.id, \n                    type: node.attributes.type,\n                    handler: addNode.createDelegate(this, [node, 'element'])\n                },{\n                    text: 'New Property',\n                    id: 'add_property_mnu',\n                    hidden: true,\n                    nodeId: node.attributes.id, \n                    type: node.attributes.type,\n                    handler: addNode.createDelegate(this, [node, 'property'])\n                },{\n                    text: 'New Property Value',\n                    id: 'add_value_mnu',\n                    hidden: true,\n                    nodeId: node.attributes.id, \n                    type: node.attributes.type,\n                    handler: addNode.createDelegate(this, [node, 'value']) \n                },{\n                    text: 'Delete This Item',\n                    id: 'delete_node_mnu',\n                    hidden: true,\n                    nodeId: node.attributes.id, \n                    type: node.attributes.type,\n                    handler: deleteNode.createDelegate(this, [node]) \n                },{\n                    text: 'Rename This Item',\n                    id: 'rename_node_mnu',\n                    hidden: true,\n                    nodeId: node.attributes.id, \n                    type: node.attributes.type,\n                    handler: renameNode.createDelegate(this, [node]) \n                }]\n            });\n        \n        Ext.getCmp('add_category_mnu').hide();\n        Ext.getCmp('add_element_mnu').hide();\n        Ext.getCmp('add_property_mnu').hide();\n        Ext.getCmp('add_value_mnu').hide();\n        Ext.getCmp('delete_node_mnu').hide();\n        Ext.getCmp('rename_node_mnu').hide();\n\n        switch (node.attributes.type){\n        case 'product':\n            Ext.getCmp('add_category_mnu').show();\n            break;\n\n        case 'category':\n            Ext.getCmp('add_element_mnu').show();\n            Ext.getCmp('delete_node_mnu').show();\n            Ext.getCmp('rename_node_mnu').show();\n            break;\n\n        case 'element':\n            Ext.getCmp('add_element_mnu').show();\n            Ext.getCmp('add_property_mnu').show();\n            Ext.getCmp('delete_node_mnu').show();\n            Ext.getCmp('rename_node_mnu').show();\n            break;\n\n        case 'property':\n            Ext.getCmp('add_value_mnu').show();\n            Ext.getCmp('delete_node_mnu').show();\n            Ext.getCmp('rename_node_mnu').show();\n            break;\n\n        case 'value':\n            Ext.getCmp('delete_node_mnu').show();\n            Ext.getCmp('rename_node_mnu').show();\n            break;\n            \n        }\n        \n        ctxmenu.showAt(event.getXY());\n\n    }\n    \n    function addNode(node, newtype){\n        var type = newtype == 'element' && node.attributes.type == 'element' ? 'child' : newtype;\n        \n        testopia_form.submit({\n            url: 'tr_environments.cgi', \n            params:{\n                action: 'create_child',\n                id: node.id, \n                type: type,\n                env_id: ";
#line 455 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n            }, \n            success:function(f,a){\n                node.leaf = false;\n                var newNode = new Ext.tree.TreeNode(a.result.env_object);\n                node.appendChild(newNode);\n                node.expand(false, true, function(){\n                    if (node.getOwnerTree().id == 'variable_tree'){\n                        itemTreeEditor.triggerEdit(newNode);\n                    }\n                    else {\n                        productTreeEditor.triggerEdit(newNode);\n                    }\n                });\n            }, \n            failure: Testopia.Util.error\n        });      \n    }\n    \n    function deleteNode(node){\n        testopia_form.submit({\n            url: 'tr_environments.cgi', \n            params:{\n                action: 'delete_element',\n                id: node.attributes.property_id || node.id, \n                type: node.attributes.type, \n                env_id: ";
#line 481 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n            }, \n            success:function(object){\n                node.remove();\n                Testopia.Util.notify.msg('Environment '+ node.attributes.type +' Deleted', '');\n            }, \n            failure: Testopia.Util.error\n        }); \n    }\n    \n    function renameNode(node){\n        if (node.getOwnerTree().id == 'variable_tree'){\n            itemTreeEditor.triggerEdit(node);\n        }\n        else {\n            productTreeEditor.triggerEdit(node);\n        }\n                \n    }\n    \n    \n    function copyNode(node){\n        var copy = new Tree.TreeNode(Ext.apply({}, node.attributes));\n        for(var i=0; i < node.childNodes.length; i++){\n            n = node.childNodes[i];\n            if(n){\n                copy.appendChild(copyNode(n));\n            }\n        }\n        return copy; \n    };\n   \n    itemTreeEditor.on(\"beforestartedit\", function(editor, element, value){\n       if(!editor.editNode)\n           return true;\n       var type = editor.editNode.attributes.type;\n       if(type == 'product' || type == 'classification')\n           return false;\n    });\n    \n    productTreeEditor.on(\"beforestartedit\", function(editor, element, value){\n       if(!editor.editNode)\n           return true;\n       var type = editor.editNode.attributes.type;\n       if(type == 'product' || type == 'classification')\n           return false;\n    });\n   \n    environmentTreeEditor.on('beforestartedit', function(editor, element, value){\n        if(Ext.getCmp('environment_tree').getSelectionModel().getSelectedNode().attributes.type != \"environment\")\n               return false;\n    }); \n    \n    vtree.on(\"enddrag\", applyElement, this);\n    ptree.on(\"enddrag\", applyElement, this); \n    \n    etree.on(\"beforenodedrop\", function(event){\n        event.target = event.tree.root;\n        event.point = 'append';\n        event.dropNode = copyNode(event.dropNode);\n    });\n        \n    function applyElement(treePanel, node, dd, e){\n        testopia_form.submit({\n            url: 'tr_environments.cgi',\n            params: {id: node.id, env_id: ";
#line 546 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['environment', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ", type: node.attributes.type, action: 'apply_element'},\n            success: function(f,a){\n                etree.getLoader().load(etree.root, function(){etree.root.expand()});\n            },\n            failure: Testopia.Util.error\n        });\n    }\n    \n    var EnvironmentPanel = new Ext.Panel({\n        id: 'environment_panel',\n        layout: 'border',\n        applyTo: 'environment_div',\n        height: 800,\n        items: [\n            etree,\n        {\n            layout: 'border',\n            region: 'east',\n            width: 300,\n            split: true,\n            items: [vtree, ptree]\n        },{\n            title: 'Help',\n            collapsible: true,\n            region: 'south',\n            split: true,\n            height: 200\n        }]\n    });\n    vtree.dropZone.isTarget = false;\n    ptree.dropZone.isTarget = false;\n});\n\n\n</script>\n\n<div id=\"environment_div\"></div>\n";
#line 584 "extensions/Testopia/template/en/default/testopia/environment/show.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
