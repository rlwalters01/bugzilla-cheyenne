use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1389716719',
        'name' => 'testopia/export/xml.case.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n";
#line 23 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n\n    <testcase author=\"";
#line 25 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'author', 0, 'email', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" priority=\"";
#line 25 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'priority', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" automated=\"";
#line 25 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'isautomated', 0]) ? 'Automatic' : 'Manual';
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" status=\"";
#line 25 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'status', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 28 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'text', 0, 'action', 0])) {
    $output .=  "\n        <action>";
#line 27 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('replace', [ '>', '&testopia_gt;' ])
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('replace', [ '<', '&testopia_lt;' ])
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'action', 0]);
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "</action>";
    }
    
#line 31 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'alias', 0])) {
    $output .=  "\n        <alias>";
#line 30 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'alias', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</alias>";
    }
    
#line 34 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'arguments', 0])) {
    $output .=  "\n        <arguments>";
#line 33 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'arguments', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</arguments>";
    }
    
#line 37 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'blocked', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'blocked_test_case'} = $_tt_value;
    $output .=  "\n        <blocks type=\"Xml_description\">";
#line 36 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['blocked_test_case', 0, 'summary', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</blocks>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 40 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'text', 0, 'breakdown', 0])) {
    $output .=  "\n        <breakdown>";
#line 39 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('replace', [ '>', '&testopia_gt;' ])
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('replace', [ '<', '&testopia_lt;' ])
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'breakdown', 0]);
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "</breakdown>";
    }
    
#line 43 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'category', 0, 'name', 0])) {
    $output .=  "\n        <categoryname>";
#line 42 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'category', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</categoryname>";
    }
    
#line 46 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'components', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'component'} = $_tt_value;
    $output .=  "\n        <component product=\"";
#line 45 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    $output .=  $stash->get(['component', 0, 'product_name', 0]);
    $output .=  "\">";
#line 45 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['component', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</component>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 49 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'default_tester', 0, 'email', 0])) {
    $output .=  "\n        <defaulttester>";
#line 48 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'default_tester', 0, 'email', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</defaulttester>";
    }
    
    $output .=  "\n";
#line 53 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'dependson', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'dependson_test_case'} = $_tt_value;
    $output .=  "\n        <dependson type=\"Xml_description\">";
#line 52 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['dependson_test_case', 0, 'summary', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</dependson>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
#line 57 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'text', 0, 'effect', 0])) {
    $output .=  "\n        <expectedresults>";
#line 56 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('replace', [ '>', '&testopia_gt;' ])
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('replace', [ '<', '&testopia_lt;' ])
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'effect', 0]);
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "</expectedresults>";
    }
    
#line 60 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'requirement', 0])) {
    $output .=  "\n        <requirement>";
#line 59 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'requirement', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</requirement>";
    }
    
#line 63 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'script', 0])) {
    $output .=  "\n        <script>";
#line 62 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'script', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</script>";
    }
    
#line 66 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'text', 0, 'setup', 0])) {
    $output .=  "\n        <setup>";
#line 65 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('replace', [ '>', '&testopia_gt;' ])
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('replace', [ '<', '&testopia_lt;' ])
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'setup', 0]);
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "</setup>";
    }
    
#line 69 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    if ($stash->get(['case', 0, 'summary', 0])) {
    $output .=  "\n        <summary>";
#line 68 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'summary', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</summary>";
    }
    
#line 72 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'tags', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'tag'} = $_tt_value;
    $output .=  "\n        <tag>";
#line 71 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['tag', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tag>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 75 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'plans', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'test_plan'} = $_tt_value;
    $output .=  "\n        <testplan_reference type=\"Xml_description\">";
#line 74 "extensions/Testopia/template/en/default/testopia/export/xml.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['test_plan', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</testplan_reference>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n    </testcase>\n    ";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
