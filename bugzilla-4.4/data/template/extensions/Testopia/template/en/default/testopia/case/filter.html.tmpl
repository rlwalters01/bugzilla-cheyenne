use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1338251990',
        'name' => 'testopia/case/filter.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
#line 21 "extensions/Testopia/template/en/default/testopia/case/filter.html.tmpl"
    $output .=  $context->process('testopia/blocks.html.tmpl');
    $output .=  "\n\n<form id=\"case_filter\" method=\"GET\">\n  <input type=\"hidden\" name=\"plan_id\" value=\"";
#line 24 "extensions/Testopia/template/en/default/testopia/case/filter.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" />\n  <input type=\"hidden\" name=\"addrun\" value=\"";
#line 25 "extensions/Testopia/template/en/default/testopia/case/filter.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('addrun');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" />\n  <input type=\"hidden\" name=\"case_status\" value=\"CONFIRMED\" />\n  <table>\n    <tr class=\"bz_row_header\">\n      <th>Category</th>\n      <th>Priority</th>\n      <th>Components</th>\n      <th>Automatic</th>\n    </tr>\n    <tr>\n      <td>";
#line 36 "extensions/Testopia/template/en/default/testopia/case/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'category_id', 'accesskey' => 't', 'list' => $stash->get(['plan', 0, 'product', 0, 'categories', 0]), 'elements' => 5, 'mult' => 1  } });
    $output .=  "   \n      </td>\n      <td>";
#line 43 "extensions/Testopia/template/en/default/testopia/case/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'priority_id', 'accesskey' => 'p', 'list' => $stash->get(['case', 0, 'get_priority_list', 0]), 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n      </td>\n      <td>";
#line 50 "extensions/Testopia/template/en/default/testopia/case/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'component', 'accesskey' => 'm', 'list' => $stash->get(['plan', 0, 'product', 0, 'components', 0]), 'elements' => 5, 'mult' => 1, 'byname' => 1  } });
    $output .=  "\n      </td>      \n      <td valign=\"top\">";
#line 58 "extensions/Testopia/template/en/default/testopia/case/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'isautomated', 'accesskey' => 'a', 'list' => [ { 'id' => '0', 'name' => 'Manual'  }, { 'id' => '1', 'name' => 'Automatic'  } ], 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n    </td>\n    <td>\n      <table>\n      <tr>\n        <th align=\"right\" class=\"bz_row_header\">Summary Contains:</th>\n        <td><input type=\"hidden\" name=\"summary_type\" value=\"allwordssubstr\" />\n            <input name=\"summary\"></td>\n      </tr>\n      <tr>\n        <th align=\"right\" class=\"bz_row_header\">Tags:</th>\n        <td><input type=\"hidden\" name=\"tags_type\" value=\"anyexact\" />\n            <input id=\"tags\" name=\"tags\">\n        </td>\n      </tr>\n      <tr>\n        <th align=\"right\" class=\"bz_row_header\">Default Tester Contains:</th>\n        <td><input type=\"hidden\" name=\"default_tester_type\" value=\"substring\" />\n            <input name=\"default_tester\"></td>\n      </tr>\n      </table>\n      </td>\n    </tr>\n  </table>\n</form>\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
