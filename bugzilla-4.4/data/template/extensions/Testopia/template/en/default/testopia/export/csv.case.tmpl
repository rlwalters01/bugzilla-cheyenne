use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1338251990',
        'name' => 'testopia/export/csv.case.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n";
#line 24 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
#line 26 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $stash->set('colsepchar', $stash->get(['user', 0, 'settings', 0, 'csv_colsepchar', 0, 'value', 0]));
    $output .=  "\n";
#line 105 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('displaycolumns');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'column'} = $_tt_value;
#line 101 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # SWITCH
    do {
        my $_tt_result = $stash->get('column');
        my $_tt_match;
        SWITCH: {
    $_tt_match = 'action';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 31 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'action', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'author_id';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 33 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'author', 0, 'email', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'blocks';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 35 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'blocked_list', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'break_down';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 37 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'breakdown', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'case_status_id';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 39 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'status', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'category_id';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 41 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'category', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'components';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 50 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
#line 49 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'components', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'component'} = $_tt_value;
#line 45 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get(['component', 0, 'name', 0]);
    $output .=  "(product=";
#line 45 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get(['component', 0, 'product_name', 0]);
    $output .=  ")";
#line 48 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    if ($stash->get('component') ne $stash->get(['case', 0, 'components', 0, 'last', 0])) {
#line 47 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get('colsepchar');
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'default_tester_id';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 52 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'default_tester', 0, 'email', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'depends_on';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 54 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'dependson_list', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'expected_results';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 56 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'effect', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'isautomated';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 58 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'isautomated', 0]) ? 'YES' : 'NO';
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'plans';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 67 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
#line 66 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'plans', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'plan'} = $_tt_value;
#line 62 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get(['plan', 0, 'id', 0]);
#line 65 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    if ($stash->get('plan') ne $stash->get(['case', 0, 'plans', 0, 'last', 0])) {
#line 64 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get('colsepchar');
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'priority_id';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 69 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'priority', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'set_up';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 71 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'setup', 0]);
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'tags';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 80 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
#line 79 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'tags', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'tag'} = $_tt_value;
#line 75 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get(['tag', 0, 'name', 0]);
#line 78 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    if ($stash->get('tag') ne $stash->get(['case', 0, 'tags', 0, 'last', 0])) {
#line 77 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get('colsepchar');
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'bugs';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 89 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
#line 88 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'bugs', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'bug'} = $_tt_value;
#line 84 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get(['bug', 0, 'id', 0]);
#line 87 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    if ($stash->get('bug') ne $stash->get(['case', 0, 'bugs', 0, 'last', 0])) {
#line 86 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get('colsepchar');
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
    $_tt_match = 'runs';
    $_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
    if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 98 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
#line 97 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'runs', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'run'} = $_tt_value;
#line 93 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get(['run', 0, 'id', 0]);
#line 96 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    if ($stash->get('run') ne $stash->get(['case', 0, 'runs', 0, 'last', 0])) {
#line 95 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get('colsepchar');
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
        
        &$_tt_filter($output);
    };
    
        last SWITCH;
    }
#line 100 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, $stash->get('column'), 0]);
        
        &$_tt_filter($output);
    };
    
        }
    };
    
#line 104 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    if ($stash->get('column') ne $stash->get(['displaycolumns', 0, 'last', 0])) {
#line 103 "extensions/Testopia/template/en/default/testopia/export/csv.case.tmpl"
    $output .=  $stash->get('colsepchar');
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
