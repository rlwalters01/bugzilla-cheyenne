use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1338251990',
        'name' => 'testopia/reports/report-bar.png.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
#line 22 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
#line 24 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    $stash->set('y_label', $stash->get(['report', 0, 'type', 0]));
    $output .=  "\n";
#line 26 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    $output .=  $context->process('global/field-descs.none.tmpl');
    $output .=  "\n";
#line 28 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    $stash->set('col_field_disp', $stash->get(['field_descs', 0, $stash->get('col_field'), 0]) || $stash->get('col_field'));
    $output .=  "\n\n";
#line 31 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('null')
                  || $context->throw($context->error);
    
#line 31 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    # USE
    $stash->set('graph',
                $context->plugin('GD.Graph.bars', [ $stash->get(['report', 0, 'width', 0]), $stash->get(['report', 0, 'height', 0]) ]));
#line 31 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    $output .=  $stash->get(['graph', 0, 'set', [ { 'x_label' => $stash->get('col_field_disp'), 'y_label' => $stash->get('y_label'), 'y_tick_number' => 8, 'y_number_format' => '%d', 'x_label_position' => 0.5, 'x_labels_vertical' => $stash->get('x_labels_vertical'), 'bar_spacing' => 8, 'shadow_depth' => 4, 'shadowclr' => 'dred', 'show_values' => 1, 'legend_placement' => 'RT' } ]]);
#line 31 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    if ($stash->get('cumulate')) {
    $output .=  $stash->get(['graph', 0, 'set', [ { 'cumulate' => 'true', 'show_values' => 0 } ]]);
    }
    
#line 31 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    $output .=  $stash->get(['graph', 0, 'set_legend', [ $stash->get(['report', 0, 'row_names', 0, 0, 0]), $stash->get(['report', 0, 'row_names', 0, 1, 0]), $stash->get(['report', 0, 'row_names', 0, 2, 0]), $stash->get(['report', 0, 'row_names', 0, 3, 0]), $stash->get(['report', 0, 'row_names', 0, 4, 0]), $stash->get(['report', 0, 'row_names', 0, 5, 0]), $stash->get(['report', 0, 'row_names', 0, 6, 0]), $stash->get(['report', 0, 'row_names', 0, 7, 0]), $stash->get(['report', 0, 'row_names', 0, 8, 0]), $stash->get(['report', 0, 'row_names', 0, 9, 0]), $stash->get(['report', 0, 'row_names', 0, 10, 0]), $stash->get(['report', 0, 'row_names', 0, 11, 0]), $stash->get(['report', 0, 'row_names', 0, 12, 0]), $stash->get(['report', 0, 'row_names', 0, 13, 0]), $stash->get(['report', 0, 'row_names', 0, 14, 0]), $stash->get(['report', 0, 'row_names', 0, 15, 0]) ]]);
#line 31 "extensions/Testopia/template/en/default/testopia/reports/report-bar.png.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('stdout', [ 1 ])
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['graph', 0, 'plot', [ $stash->get(['data', 0, 0, 0]) ], 'png', 0]);
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
