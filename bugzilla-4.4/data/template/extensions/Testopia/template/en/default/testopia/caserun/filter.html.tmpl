use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1389716719',
        'name' => 'testopia/caserun/filter.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n<div id=\"caserun-filter-div\" style=\"visibility:hidden\">\n<form method=\"GET\" action=\"tr_list_caseruns.cgi\" id=\"caserun_filter_form\">\n<input type=\"hidden\" name=\"run_id\" value=\"";
#line 22 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['run', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" />\n<input type=\"hidden\" name=\"current_tab\" value=\"case_run\" />";
#line 24 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    $stash->set('query', $stash->get(['table', 0, 'get_query_part', 0]));
    $output .=  "\n<table>\n  <tr class=\"bz_row_header\">\n    <th>Status</th>\n    <th>Category</th>\n    <th>Build</th>\n    <th>Environment</th>\n    <th>Priority</th>\n    <th>Component</th>\n    <th>Automatic</th>\n    <td rowspan=\"2\">\n      <table>\n        <tr>\n          <th align=\"right\">Assignee Contains</th>\n          <td><input type=\"hidden\" name=\"assignee_type\" value=\"substring\" />\n              <input name=\"assignee\">\n          </td>\n        </tr>\n        <tr>\n          <th align=\"right\">Tested By Contains</th>\n          <td><input type=\"hidden\" name=\"testedby_type\" value=\"substring\" />\n              <input name=\"testedby\">\n          </td>\n        </tr>\n        <tr>\n          <th align=\"right\">Summary Contains</th>\n          <td><input type=\"hidden\" name=\"case_summary_type\" value=\"allwordssubstr\" />\n              <input name=\"case_summary\">\n          </td>\n        </tr>\n        <tr>\n          <th align=\"right\">Requirement</th>\n          <td><input type=\"hidden\" name=\"requirement_type\" value=\"substring\" />\n              <input name=\"requirement\">\n          </td>\n        </tr>\n        <tr>\n          <th align=\"right\">Case Tags</th>\n          <td><input type=\"hidden\" name=\"tags_type\" value=\"anyexact\" />\n              <input id=\"tags\" name=\"tags\"\n                     dojoType=\"combobox\" \n                     dataUrl=\"tr_quicksearch.cgi?action=gettag&product_id=";
#line 65 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['run', 0, 'plan', 0, 'product_id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "&search=\${searchString}\" \n                     mode=\"remote\"\n                     searchDelay=\"1000\"\n                     maxListLength=\"10\">\n          </td>\n        </tr>\n      </table>\n    </td>\n  </tr>\n  <tr>\n    <td valign=\"top\">";
#line 76 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'case_run_status', 'byname' => 1, 'list' => $stash->get(['caserun', 0, 'get_status_list', 0]), 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n    </td>\n    <td valign=\"top\">";
#line 84 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'category', 'list' => $stash->get(['run', 0, 'filter_case_categories', 0]), 'byname' => 1, 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n    </td>\n    <td valign=\"top\">";
#line 93 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'build', 'list' => $stash->get(['run', 0, 'filter_builds', 0]), 'byname' => 1, 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n    </td>\n    <td valign=\"top\">";
#line 101 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'environment', 'list' => $stash->get(['run', 0, 'filter_environments', 0]), 'byname' => 1, 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n    </td>\n    <td valign=\"top\">";
#line 109 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'priority_id', 'list' => $stash->get(['case', 0, 'get_priority_list', 0]), 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n    </td>\n    <td valign=\"top\">";
#line 116 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'component', 'list' => $stash->get(['run', 0, 'filter_components', 0]), 'byname' => 1, 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n    </td>\n    <td valign=\"top\">";
#line 124 "extensions/Testopia/template/en/default/testopia/caserun/filter.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'isautomated', 'accesskey' => 'a', 'list' => [ { 'id' => '0', 'name' => 'Manual'  }, { 'id' => '1', 'name' => 'Automatic'  } ], 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n    </td>\n  </tr>\n</table>\n</form>\n</div>";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
