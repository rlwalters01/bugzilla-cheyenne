use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1389716719',
        'name' => 'testopia/plan/show.xml.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
#line 26 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    if (! $stash->get('header_done')) {
#line 23 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
#line 24 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    $output .=  $context->process('testopia/export/xml.header.tmpl');
#line 25 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    $stash->set('header_done', 1);
    }
    
    $output .=  "\n    <tr:testplan id=\"";
#line 27 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    $output .=  $stash->get(['plan', 0, 'id', 0]);
    $output .=  "\">\n        <tr:name>";
#line 28 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:name>\n        <tr:product id=\"";
#line 29 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'product', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 29 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'product', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:product>\n        <tr:author id=\"";
#line 30 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'author_id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n            <tr:login>";
#line 31 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'author', 0, 'login_name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:login>\n            <tr:name>";
#line 32 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'author', 0, 'realname', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:name>\n        </tr:author>\n        <tr:plan_type id=\"";
#line 34 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'type_id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 34 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'plan_type', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:plan_type>\n        <tr:default_product_version>";
#line 35 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'default_product_version', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:default_product_version>\n        <tr:creation_date>";
#line 36 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'creation_date', 0, 'replace', [ ' ', 'T' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:creation_date>\n        <tr:last_changed>";
#line 37 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'last_changed', 0, 'replace', [ ' ', 'T' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:last_changed>\n        <tr:archived>";
#line 38 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'isactive', 0]) ? 'false' : 'true';
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:archived>\n        <tr:document version=\"";
#line 39 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'version', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n            <tr:author>";
#line 40 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'text', 0, 'author', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:author>\n            <tr:text><![CDATA[";
#line 41 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['plan', 0, 'text', 0, 'plan_text', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "]]></tr:text>\n        </tr:document>";
#line 45 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['plan', 0, 'tags', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'t'} = $_tt_value;
    $output .=  "\n        <tr:tag>";
#line 44 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['t', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tr:tag>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 48 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['plan', 0, 'test_cases', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'case'} = $_tt_value;
    $output .=  "\n            ";
#line 47 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    $output .=  $context->process('testopia/case/show.xml.tmpl');;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 51 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['plan', 0, 'test_runs', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'run'} = $_tt_value;
    $output .=  "\n            ";
#line 50 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    $output .=  $context->process('testopia/run/show.xml.tmpl');;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 54 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['plan', 0, 'attachments', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'a'} = $_tt_value;
    $output .=  "\n            ";
#line 53 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    $output .=  $context->process('testopia/attachment/show.xml.tmpl');;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n    </tr:testplan>  ";
#line 58 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    if ($stash->get('show_footer')) {
#line 57 "extensions/Testopia/template/en/default/testopia/plan/show.xml.tmpl"
    $output .=  $context->process('testopia/export/xml.footer.tmpl');
    }
    
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
