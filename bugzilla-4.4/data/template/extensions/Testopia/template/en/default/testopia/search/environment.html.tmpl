use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1389716719',
        'name' => 'testopia/search/environment.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n  \n\n<script src=\"testopia/dojo/dojo.js\" type=\"text/javascript\"></script>\n\n<script type=\"text/javascript\">\n    dojo.require('dojo.io.*');\n    function getProducts(class_ids){\n    var env_products = document.getElementById(\"env_products\");\n    env_products.disabled = true;\n    \n      dojo.io.bind({\n        url: \"tr_query.cgi\",\n        content: { action: \"get_products\", class_ids: class_ids},\n        method: \"POST\",\n        load: function(tpe, data, evt){\n          if(data == \"\"){\n            env_products.add(new Option(\"[none available]\", \"none\"), null);\n          }\n          else{\n            var products = data.split(\"|||\");\n            var product;\n            var product_ids = new Array();\n            \n            for (i = 0; i < products.length; i++){\n              product = products[i].split(\"||\");\n              env_products.add(new Option(product[1], product[0]), null);\n              product_ids[i] = product[0];\n            }\n            getCategories(product_ids);\n          }\n          env_products.disabled = false;\n        },\n        error: function(type, error){ alert(\"ERROR\");},\n          mimetype: \"text/plain\"\n      });\n    }\n    \n    function getCategories(prod_ids){\n      var env_categories = document.getElementById(\"env_categories\");\n      env_categories.disabled = true;\n      \n      dojo.io.bind({\n        url: \"tr_query.cgi\",\n        method: \"POST\",\n        content: { action: \"get_categories\", prod_id: prod_ids },\n        load: function(type, data, evt){\n          //env_categories.options.length = 0;\n          \n          if(data == \"\"){\n            env_categories.add(new Option(\"[none available]\", \"none\"), null);\n          }\n          else{\n          var categories = data.split(\"|||\");\n          var category;\n          var category_ids = new Array();\n          \n          if (categories.length == 0)\n            {\n              env_categories.add(new Option(\"[none avalible]\", \"none\"), null);\n            }\n            else\n            {\n              for (i = 0; i < categories.length; i++)\n              {\n                category = categories[i].split(\"||\");\n                env_categories.add(new Option(category[1], category[0]),null);\n                category_ids[i] = category[0];\n              }\n              getElements(category_ids);\n            }\n              }\n              env_categories.disabled = false;\n          },\n        error: function(type, error){ alert(\"ERROR\");},\n          mimetype: \"text/plain\"\n      })\n    }\n    \n  function getElements(cat_ids){\n    var env_elements = document.getElementById(\"env_elements\");   \n    env_elements.disabled = true;\n    \n    dojo.io.bind({\n    url: \"tr_query.cgi\",\n    method: \"POST\",\n    content: {  action: \"get_elements\", cat_id: cat_ids  },\n    load: function(type, data, evt){\n      if(data == \"\"){\n        env_elements.add(new Option(\"[none available]\", \"none\"), null);\n      }\n      else{\n        var elements = data.split(\"|||\");\n        var element;\n        var element_ids = new Array();\n        \n        for (i = 0; i < elements.length; i++){\n          element = elements[i].split(\"||\");\n            env_elements.add(new Option(element[1], element[0]), null);\n            element_ids[i] = element[0];\n              }\n              getProperties(element_ids);\n          }\n      env_elements.disabled = false;\n    },\n        error:  function(type, error){ alert(\"ERROR\");},\n        mimetype: \"text/plain\"\n      });\n    }\n    \n    function getProperties(elmnt_ids){\n      var env_properties = document.getElementById(\"env_properties\");\n      env_properties.disabled = true;\n      \n      dojo.io.bind({\n        url: \"tr_query.cgi\",\n        method: \"POST\",\n        content: {  action: \"get_properties\", elmnt_id: elmnt_ids  },\n        load: function(type, data, evt){\n          if (data == \"\"){\n            env_properties.options.add(new Option(\"[none avaliable]\",\"none\"), null);\n          }\n          else{\n            var properties = data.split(\"|||\");\n            var property;\n            for (i = 0; i < properties.length; i++){\n              property = properties[i].split(\"||\");\n              env_properties.options.add(new Option(property[1], property[0]), null);\n            }\n          }\n          env_properties.disabled = false;\n            },\n            error:  function(type, error){ alert(\"ERROR\");},\n            mimetype: \"text/plain\"\n         });\n    }\n    \n     function getExps(prop_ids){\n      var env_expressions = document.getElementById(\"env_expressions\");\n      env_expressions.disabled = true;\n      \n    dojo.io.bind({\n      url: \"tr_query.cgi\",\n      method: \"POST\",\n      content:{ action: \"get_valid_exp\", prop_id: prop_ids },\n      load: function(type, data, evt){\n            if (data == \"\"){\n              env_expressions.add(new Option(\"[none available]\", \"none\"), null);\n            }\n            else{\n              var exps = data.split(\"|||\");\n              var exp;\n              for (i = 0; i < exps.length; i++){\n                exp = exps[i].split(\"||\");\n                env_expressions.add(new Option(exp[0], exp[0]), null);\n              }\n            }\n        env_expressions.disabled = false;\n            },\n            error: function(type, error){ alert(\"ERROR\");},\n            mimetype: \"text/plain\"\n        });\n    }\n    \n    function env_class_change(class){\n      class.disabled = true;\n      \n      document.getElementById(\"env_products\").options.length = 0;\n      document.getElementById(\"env_categories\").options.length = 0;\n      document.getElementById(\"env_elements\").options.length = 0;\n      document.getElementById(\"env_properties\").options.length = 0;\n      document.getElementById(\"env_expressions\").options.length = 0;\n      \n      var class_ids = new Array();\n      var count = 0;\n      \n      for(i = 0; i < class.length; i++){\n        if (class[i].selected)\n        {\n          class_ids[count] = class[i].value;\n          count++;\n        }\n      }\n      \n      getProducts(class_ids);\n      \n      class.disabled = false;\n    }\n\n    function env_products_change(prod){\n      prod.disabled = true;\n      \n      document.getElementById(\"env_categories\").options.length = 0;\n      document.getElementById(\"env_elements\").options.length = 0;\n      document.getElementById(\"env_properties\").options.length = 0;\n      document.getElementById(\"env_expressions\").options.length = 0;\n      \n      var prod_ids = new Array();\n      var count = 0;\n      \n      for(i = 0; i < prod.length; i++){\n        if (prod[i].selected)\n        {\n          prod_ids[count] = prod[i].value;\n          count++;\n        }\n      }\n      \n      getCategories(prod_ids);\n      \n      prod.disabled = false;\n    }\n    \n    function env_categories_change(cat){\n      cat.disabled = true;\n      \n      document.getElementById(\"env_elements\").options.length = 0;\n      document.getElementById(\"env_properties\").options.length = 0;\n      document.getElementById(\"env_expressions\").options.length = 0;\n      \n      var cat_ids = new Array();\n      var count = 0;\n      \n      for(i = 0; i < cat.length; i++){\n        if (cat[i].selected)\n        {\n          cat_ids[count] = cat[i].value;\n          count++;\n        }\n      }\n        \n      getElements(cat_ids);\n      \n      cat.disabled = false;\n    }\n    \n    function env_elements_change(elmnt){\n      elmnt.disabled = true;\n      \n      document.getElementById(\"env_properties\").options.length = 0;\n      document.getElementById(\"env_expressions\").options.length = 0;\n      \n      var elmnt_ids = new Array();\n      var count = 0;\n      \n      for (i = 0; i < elmnt.length; i++){\n        if (elmnt[i].selected)\n        {\n          elmnt_ids[count] = elmnt[i].value;\n          count++;\n        }\n      }\n      \n        getProperties(elmnt_ids);\n        \n        elmnt.disabled = false;\n    }\n    \n    function env_properties_change(prop){\n      prop.disabled = true;\n      \n      document.getElementById(\"env_expressions\").options.length = 0;\n      \n      var prop_ids = new Array();\n      var count = 0;\n      \n      for (i = 0; i < prop.length; i++)\n      {\n        if (prop[i].selected)\n        {\n          prop_ids[count] = prop[i].value;\n          count++;\n        }\n      }\n      \n      getExps(prop_ids);\n      \n      prop.disabled = false;\n    }\n</script> \n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n<h3>Search for Environments</h3>\n<form action=\"tr_list_environments.cgi\" method=\"GET\">\n<table>\n  <tr>\n    <td>";
#line 323 "extensions/Testopia/template/en/default/testopia/search/environment.html.tmpl"
    if ($stash->get(['Param', [ 'useclassification' ]])) {
    $output .=  "\n      <div class=\"bodyHead\" style=\"padding:10px 0 5px 0;\">Classification</div>";
#line 316 "extensions/Testopia/template/en/default/testopia/search/environment.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'classification', 'accesskey' => 'c', 'list' => $stash->get('classifications'), 'elements' => 5, 'mult' => 1, 'events' => 'onchange="env_class_change(this);"'  } });
    }
    
    $output .=  "\n    </td>\n    <td style=\"width:25px;\"></td>\n";
    $output .=  "\n    <td>\n      <div class=\"bodyHead\" style=\"padding:10px 0 5px 0;\"><u>P</u>roducts:</div>";
#line 329 "extensions/Testopia/template/en/default/testopia/search/environment.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'env_products', 'accesskey' => 'c', 'list' => $stash->get('products'), 'elements' => 5, 'mult' => 1, 'events' => 'onchange="env_products_change(this);"'  } });
    $output .=  "\n    </td>\n    <td style=\"width:25px;\"></td>\n";
    $output .=  "\n    <td>\n    <div class=\"bodyHead\" style=\"padding:10px 0 5px 0;\"><u>C</u>ategory:</div>";
#line 341 "extensions/Testopia/template/en/default/testopia/search/environment.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'env_categories', 'accesskey' => 'c', 'list' => $stash->get(['env', 0, 'get_all_env_categories', [ 1 ]]), 'elements' => 5, 'mult' => 1, 'events' => 'onchange="env_categories_change(this);"'  } });
    $output .=  "\n    </td>\n    <td style=\"width:25px;\"></td>\n  </tr>\n  <tr>\n";
    $output .=  "\n  <td>\n    <div class=\"bodyHead\" style=\"padding:10px 0 5px 0;\"><u>E</u>lement:</div>";
#line 355 "extensions/Testopia/template/en/default/testopia/search/environment.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'env_elements', 'accesskey' => 'c', 'list' => $stash->get(['env', 0, 'get_all_visible_elements', [ 1 ]]), 'elements' => 5, 'mult' => 1, 'events' => 'onchange="env_elements_change(this);"'  } });
    $output .=  "\n    \n  </td>  \n  <td style=\"width:25px;\"></td>\n";
    $output .=  "\n  <td>\n      <div class=\"bodyHead\" style=\"padding:10px 0 5px 0;\"><u>P</u>roperties:</div>";
#line 368 "extensions/Testopia/template/en/default/testopia/search/environment.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'env_properties', 'accesskey' => 'c', 'list' => $stash->get(['env', 0, 'get_all_element_properties', [ 1 ]]), 'elements' => 5, 'mult' => 1, 'events' => 'onchange="env_properties_change(this);"'  } });
    $output .=  "\n    </td>\n    <td style=\"width:25px;\"></td>\n    \n";
    $output .=  "\n    <td>\n      <div class=\"bodyHead\" style=\"padding:10px 0 5px 0;\">Property <u>V</u>alue </div>";
#line 381 "extensions/Testopia/template/en/default/testopia/search/environment.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'env_expressions', 'accesskey' => 'c', 'list' => $stash->get(['env', 0, 'get_distinct_property_values', 0]), 'elements' => 5, 'mult' => 1  } });
    $output .=  "\n    </td>\n\n</tr>\n</table>\n<br>\n<table>\n  <tr>\n    <th align=\"right\">Environment Name</th>\n    <td>";
#line 396 "extensions/Testopia/template/en/default/testopia/search/environment.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'name_type', 'list' => $stash->get('query_variants')  } });
    $output .=  "</td>\n    <td> <input name=\"name\" /></td>\n  </tr>\n  <tr>\n    <th align=\"right\">Selected Property Value</th>\n    <td>";
#line 403 "extensions/Testopia/template/en/default/testopia/search/environment.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'env_value_selected_type', 'list' => $stash->get('query_variants')  } });
    $output .=  "</td>\n    <td><input name=\"env_value_selected\" /></td>\n  </tr>\n</table>\n\n<input type=\"submit\" value=\"Search\" />\n</form>";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
