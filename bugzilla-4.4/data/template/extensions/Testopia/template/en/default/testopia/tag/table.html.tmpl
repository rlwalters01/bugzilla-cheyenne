use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1389716719',
        'name' => 'testopia/tag/table.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n\n<div id=\"tagTable\" dojoType=\"ContentPane\">  \n<table border=\"0\">\n  <tr>\n  <td valign=\"top\">";
#line 41 "extensions/Testopia/template/en/default/testopia/tag/table.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['item', 0, 'tags', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'tag'} = $_tt_value;
    $output .=  "\n  <a href=\"tr_tags.cgi?tag=";
#line 30 "extensions/Testopia/template/en/default/testopia/tag/table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['tag', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\"><span class=\"tag\">";
#line 30 "extensions/Testopia/template/en/default/testopia/tag/table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['tag', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</span></a>";
#line 34 "extensions/Testopia/template/en/default/testopia/tag/table.html.tmpl"
    if ($stash->get(['item', 0, 'canedit', 0])) {
    $output .=  "\n  <a onclick=\"removeTag(";
#line 32 "extensions/Testopia/template/en/default/testopia/tag/table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['tag', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ",";
#line 32 "extensions/Testopia/template/en/default/testopia/tag/table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['item', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ",'";
#line 32 "extensions/Testopia/template/en/default/testopia/tag/table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['item', 0, 'type', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "')\" style=\"decoration:none; cursor:pointer;\">\n      <img src=\"extensions/Testopia/img/del.gif\" alt=\"[x]\" title=\"Remove tag ";
#line 33 "extensions/Testopia/template/en/default/testopia/tag/table.html.tmpl"
    $output .=  $stash->get(['tag', 0, 'name', 0]);
    $output .=  "\"></a>";
    }
    
    $output .=  "\n<br>";
#line 39 "extensions/Testopia/template/en/default/testopia/tag/table.html.tmpl"
    if ($stash->get(['loop', 0, 'count', 0]) % 8 eq 0) {
    $output .=  "\n  </td>\n  <td valign=\"top\">";
    }
    
    $output .=  "\n";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n  </tr>\n</table>\n</div>  \n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
