use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1338251990',
        'name' => 'testopia/case/show.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n  \n";
#line 27 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
#line 28 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    $output .=  $context->process('testopia/style.none.tmpl');
#line 29 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    $output .=  $context->process('testopia/blocks.html.tmpl');
    $output .=  "\n";
#line 1 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # CAPTURE
    $stash->set('title', do {
        my $output = '';
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  ("Test Case " . $stash->get(['case', 0, 'id', 0]) . ": " . $stash->get(['case', 0, 'summary', 0]));
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
#line 32 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl');
    $output .=  "\n\n<script type=\"text/javascript\">\nvar tcase = ";
#line 35 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html_light')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'TO_JSON', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ";\n\nExt.onReady(function(){\n    Ext.QuickTips.init();\n\n    var testopia_form = new Ext.form.BasicForm('testopia_helper_frm',{});\n\n    var confirmDelete = function(){\n        Ext.Msg.show({\n           title:'Confirm Delete?',\n           msg: 'You are about to delete case ' + tcase.case_id + ' with all of its children and history. Are you sure you want to continue?',\n           buttons: Ext.Msg.YESNO,\n           fn: caseDelete,\n           animEl: 'plan-delete-btn',\n           icon: Ext.MessageBox.QUESTION\n        });\n    };\n    var caseDelete = function(btn){\n        if (btn == 'yes'){\n            testopia_form.submit({\n                url: 'tr_process_case.cgi',\n                params: {case_id: tcase.case_id, action:'delete'},\n                success: function(data){\n                    Ext.Msg.show({\n                        title:'Test Case Deleted',\n                        msg: \"Test case \" + tcase.case_id + \" was deleted\",\n                        buttons: Ext.Msg.OK,\n                        icon: Ext.MessageBox.INFO\n                    });\n                    window.location = 'tr_show_plan.cgi?plan_id=";
#line 64 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'plans', 0, 0, 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "';\n                },\n                failure: Testopia.Util.error\n            });\n        }\n    };\n\n    function submitEdits(field, value){\n        var params = {action: 'edit', case_id: tcase.case_id};\n        switch(field){\n            case 'priority': \n                params.priority = value;\n                break;\n            case 'alias': \n                params.alias = value;\n                break;\n            case 'status': \n                params.status = value;\n                break;\n            case 'summary': \n                params.summary = value;\n                break;\n            case 'category': \n                params.category = value;\n                break;\n            case 'estimated_time': \n                params.estimated_time = value;\n                break;\n            case 'tester': \n                params.tester = value;\n                break;\n            case 'requirement': \n                params.requirement = value;\n                break;\n        }\n        testopia_form.submit({\n            url: 'tr_process_case.cgi',\n            params: params,\n            success: function(){\n                Testopia.Util.notify.msg('Test Case updated', 'Test Case {0} was updated successfully', field);\n            },\n            failure: Testopia.Util.error\n        });\n\n    }\n\n    function processText(){\n        var params = {};\n        params.tcsetup = Ext.getCmp('setup_editor').getValue();\n        params.tcbreakdown = Ext.getCmp('breakdown_editor').getValue();\n        params.tcaction = Ext.getCmp('action_editor').getValue();\n        params.tceffect = Ext.getCmp('effect_editor').getValue();\n        params.case_id = tcase.case_id;\n        params.action = 'update_doc';\n        testopia_form.submit({\n            url: 'tr_process_case.cgi',\n            method: 'POST',\n            params: params,\n            success: function(){\n                Testopia.Util.notify.msg('Test case updated', 'Test Case {0} was updated successfully', 'Document');\n            },\n            failure: Testopia.Util.error\n        });\n    }\n\n    var fileMenu = new Ext.menu.Menu({\n        id: 'file-menu',\n        items: [{\n            text: \"Clone\",\n            icon: 'extensions/Testopia/img/copy.png',\n            iconCls: 'img_button_16x',\n            handler: function(){\n                Testopia.TestCase.clonePopup(tcase.product_id, tcase.case_id);\n            }\n        },{\n            text: \"Print\",\n            handler: function(){\n                window.location='tr_show_case.cgi?&case_id=";
#line 141 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "&ctype=print';\n            }\n        },{\n            text: 'Export',\n            menu: [{\n                text: 'CSV',\n                handler: function(){\n                    window.location='tr_show_case.cgi?&case_id=";
#line 148 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "&ctype=csv';\n                }\n            },{\n                text: 'XML',\n                handler: function(){\n                    window.location='tr_show_case.cgi?&case_id=";
#line 153 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "&ctype=xml';\n                }\n            }]\n        },{\n            text: \"Delete\",\n            id: 'btn-delete',\n            icon: 'extensions/Testopia/img/delete.png',\n            iconCls: 'img_button_16x',\n            disabled: tcase.candelete ? false : true,\n            handler: confirmDelete\n        }]\n    });\n\n    var caseControls = new Ext.Toolbar();\n    \n    var cases = new Ext.grid.GridPanel({\n        \n    });\n    var casepanel = new Ext.Panel({\n        layout: 'border',\n        monitorResize: true,\n        applyTo: 'case-body-div',\n        height: 800,\n        footer: true,\n        title: '";
#line 177 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('title');
        
        &$_tt_filter($output);
    };
    
    $output .=  "',\n        tbar: [{\n                text: 'File',\n                menu: fileMenu\n            },\n            new Ext.Toolbar.Fill(),\n            {\n                xtype: 'button',\n                id: 'plan-copy-button',\n                icon: 'extensions/Testopia/img/copy.png',\n                iconCls: 'img_button_16x',\n                tooltip: 'Clone this Test Case',\n                handler: function(){\n                    Testopia.TestCase.clonePopup(tcase.product_id, tcase.case_id);\n                }\n            }";
#line 202 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    if ($stash->get(['case', 0, 'candelete', 0])) {
    $output .=  "\n            ,{\n                xtype: 'button',\n                id: 'plan-delete-btn',\n                icon: 'extensions/Testopia/img/delete.png',\n                iconCls: 'img_button_16x',\n                tooltip: 'Delete this Test Case',\n                handler: confirmDelete\n            }";
    }
    
    $output .=  "\n        ,{xtype: 'tbspacer', width: 20}\n        ],\n        items:[{\n            xtype: 'tabpanel',\n            enableTabScroll: true,\n            id: 'object_panel',\n            split: true,\n            region: 'center',\n            activeTab: 0,\n            items: [\n            {\n                layout: 'column',\n                title: 'Action / Expected Results',\n                tbar: new DocCompareToolbar('case',tcase.case_id),\n                id: 'action_panel',\n                items: [{\n                    columnWidth:0.5,\n                    layout:'fit',\n                    items:{\n                        title: 'Action',\n                        height: 420,\n                        bodyBorder: false,\n                        border: false,\n                        layout: 'fit',\n                        items:[{\n                            id: 'action_editor',\n                            xtype:'htmleditor',\n                            value: '";
#line 230 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'action', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "'\n                        }]\n                    }\n                },{\n                    columnWidth:0.5,\n                    layout:'fit',\n                    items:{\n                        title: 'Expected Results',\n                        height: 420,\n                        bodyBorder: false,\n                        border: false,\n                        layout: 'fit',\n                        items:[{\n                            id: 'effect_editor',\n                            xtype:'htmleditor',\n                            value: '";
#line 245 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'effect', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "'\n                        }]  \n                    }\n                }],\n                buttons: [{ \n                    text: 'Update Action/Results',\n                    handler: processText\n                }]\n            },{\n                layout: 'column',\n                title: 'Set Up / Break Down',\n                items: [{\n                    columnWidth:0.5,\n                    layout:'fit',\n                    items:{\n                        title: 'Setup',\n                        height: 420,\n                        bodyBorder: false,\n                        border: false,\n                        layout: 'fit',\n                        items:[{\n                            id: 'setup_editor',\n                            xtype:'htmleditor',\n                            value: '";
#line 268 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'setup', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "'\n                        }]\n                    }\n                },{\n                    columnWidth:0.5,\n                    layout:'fit',\n                    items:{\n                        title: 'Breakdown',\n                        height: 420,\n                        bodyBorder: false,\n                        border: false,\n                        layout: 'fit',\n                        items:[{\n                            id: 'breakdown_editor',\n                            xtype:'htmleditor',\n                            value: '";
#line 283 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'text', 0, 'breakdown', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "'\n                        }]\n                    }\n                }],\n                buttons: [{ \n                    text: 'Update Setup/Breakdown',\n                    handler: processText\n                }]\n            },\n            new Testopia.Util.HistoryList('case', ";
#line 292 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "),\n            new Testopia.TestCaseRun.List({case_id: tcase.case_id, viewall: 1 },{id: 'case_history_grid'}),\n            new Testopia.Attachment.Grid(tcase),\n            new Testopia.TestCase.Bugs.Grid(";
#line 295 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "), \n            new Testopia.TestCase.Components(tcase.case_id),\n            {\n                title: 'Dependencies',\n                listeners: {'activate': function(){ this.doLayout(); }},\n                buttons: [{ \n                    text: 'Submit',\n                    disabled: tcase.canedit ? false : true,\n                    handler: function(){\n                        var params = {};\n                        params.tcdependson = Ext.getCmp('tcdependson').getValue();\n                        params.tcblocks = Ext.getCmp('tcblocks').getValue();\n                        params.action = 'edit';\n                        params.case_id = tcase.case_id;\n                        testopia_form.submit({\n                            url: 'tr_process_case.cgi',\n                            params: params,\n                            success: function(f,a){\n                                var blocked = '';\n                                var blist = a.result.tcase.blocked.split(',');\n                                for (var i in blist){\n                                    if (typeof blist[i] != \"string\"){\n                                        continue;\n                                    }\n                                    blocked = blocked +'<a href=\"tr_show_case.cgi?case_id=' + blist[i] + '\">' + blist[i] + '</a>';\n                                    if (i != blist.length - 1){\n                                        blocked = blocked + ', ';\n                                    }\n                                }\n                                var deps = '';\n                                var dlist = a.result.tcase.dependson.split(',');\n                                for (var i in dlist){\n                                    if (typeof dlist[i] != \"string\"){\n                                        continue;\n                                    }\n                                    deps = deps +'<a href=\"tr_show_case.cgi?case_id=' + dlist[i] + '\">' + dlist[i] + '</a>, ';\n                                    if (i != dlist.length - 1){\n                                        deps = deps + ', ';\n                                    }\n                                }\n                                Ext.getCmp('case_blocked_list').body.dom.innerHTML = blocked;\n                                Ext.getCmp('case_dependson_list').body.dom.innerHTML = deps;\n                                Testopia.Util.notify.msg('Test Case updated', 'Test Case {0} was updated successfully', 'dependencies');\n                            },\n                            failure: Testopia.Util.error\n                        });\n                    }\n                }],\n                items: [{\n                    layout: 'column',\n                    items: [{\n                        columnWidth: 0.5,\n                        layout: 'fit',\n                        border: false,\n                        items: [{\n                            xtype: 'treepanel',\n                            border: false,\n                            root: new Ext.tree.TreeNode({text: 'Test Case ";
#line 352 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "'})\n                        }]\n                        \n                    },{\n                        columnWidth: 0.5,\n                        layout: 'fit',\n                        border: false,\n                        items: [{\n                            layout: 'table',\n                            height: 450,\n                            border: false,\n                            layoutConfig: { columns: 2 },\n                            items: [{\n                                html: '<b>Blocks</b>'\n                            },{\n                                html: '<b>Depends On</b>'\n                            },{\n                                xtype: 'textarea',\n                                name: 'tcblocks',\n                                id: 'tcblocks',\n                                value: '";
#line 372 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'blocked_list', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "',\n                                width: 250\n                            },{\n                                xtype: 'textarea',\n                                name: 'tcdependson',\n                                id: 'tcdependson',\n                                value: '";
#line 378 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'dependson_list', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "',\n                                width: 250\n                            },{\n                                border: false,\n                                height: 200,\n                                id: 'case_blocked_list',\n                                autoScroll: true,\n                                html:'";
#line 385 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'blocked', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'dep'} = $_tt_value;
    $output .=  "<a href=\"tr_show_case.cgi?case_id=";
#line 385 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['dep', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" title=\"";
#line 385 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['dep', 0, 'summary', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 385 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['dep', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</a>";
#line 385 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    if (! $stash->get(['loop', 0, 'last', 0])) {
    $output .=  ', ';
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "'\n                            },{\n                                border: false,\n                                height: 200,\n                                id: 'case_dependson_list',\n                                autoScroll: true,\n                                html:'";
#line 391 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['case', 0, 'dependson', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'dep'} = $_tt_value;
    $output .=  "<a href=\"tr_show_case.cgi?case_id=";
#line 391 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['dep', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" title=\"";
#line 391 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['dep', 0, 'summary', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 391 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['dep', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</a>";
#line 391 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    if (! $stash->get(['loop', 0, 'last', 0])) {
    $output .=  ', ';
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "'\n                            }]\n                        }]\n                    }]\n                }]\n            },{\n                title: \"Automation\",\n                xtype: 'form',\n                id: 'case_automation_frm',\n                bodyStyle: 'padding: 10px',\n                listeners: {'activate': function(){ this.doLayout(); }},\n                buttons: [{ \n                    text: 'Submit',\n                    disabled: tcase.canedit ? false : true,\n                    handler: function(){\n                        var params = Ext.getCmp('case_automation_frm').getForm().getValues();\n                        params.case_id = tcase.case_id;\n                        params.action = 'edit';\n                        params.isautomated = params['ncf-automated-checkbox'] == 'on' ? 'on' : 'off';\n                        testopia_form.submit({\n                            url: 'tr_process_case.cgi',\n                            params: params,\n                            success: function(){\n                                Testopia.Util.notify.msg('Test case updated', 'Test Case {0} was updated successfully', 'automation');\n                            },\n                            failure: Testopia.Util.error\n                        });\n                    }\n                }],\n                items: [{\n                    xtype: 'fieldset',\n                    autoHeight: true,\n                    checkboxToggle: true,\n                    title: 'Automated',\n                    id: 'ncf-automated',\n                    checkBoxName: 'isautomated',\n                    collapsed: tcase.isautomated == 1 ? false : true,\n                    items: [{\n                        xtype:'textarea',\n                        fieldLabel: 'Scripts',\n                        id:'ncf-scripts',\n                        name: 'script',\n                        value: tcase.script,\n                        height: 100,\n                        width : 500\n                    },{\n                        xtype:'textfield',\n                        fieldLabel: 'Arguments',\n                        id:'ncf-arguments',\n                        name: 'arguments',\n                        value: tcase.arguments,\n			   width : 500\n                    },{\n                        xtype:'textfield',\n                        fieldLabel: 'Alias',\n                        id:'case_alias',\n                        name: 'alias',\n                        value: tcase.alias,\n			   width : 500\n                    }]\n                }]\n            }]\n        },{\n            xtype: 'panel',\n            split: true,\n            region: 'north',\n            contentEl: 'case_overview',\n            height: Ext.get('case_overview').getHeight() + 30,\n            hideBorders: true\n        },{\n            xtype: 'tabpanel',\n            split: true,\n            region:'east',\n            width: 200,\n            activeTab: 0,\n            items:[\n                new Testopia.Tags.ObjectTags('case', ";
#line 467 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "),\n                new Testopia.TestCase.PlanList(";
#line 468 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ", ";
#line 468 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'plans', 0, 0, 0, 'product_id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ")\n            ]\n        }]\n    });";
#line 611 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    if ($stash->get(['case', 0, 'canedit', 0])) {
    $output .=  "\n// Summary Editing    \n    var summary_edit_btn = new Ext.Button({\n        applyTo: 'case_summary_edit_btn_div',\n        id:'case_summary_edit_btn',\n        icon: 'extensions/Testopia/img/edit.png',\n        iconCls: 'img_button_16x',\n        tooltip: 'Edit Case Summary',\n        handler: function(){\n            Ext.getCmp('case_summary_edt').startEdit(Ext.get('case_summary_div'));\n        }\n    });\n    var case_summary_edt = new Ext.Editor(\n        new Ext.form.TextField({\n            width: Ext.get('case_summary_div').getWidth() < 200 ? 200 : Ext.get('case_summary_div').getWidth(),\n            name: 'summary'\n        }),{\n            alignment: 'tl-tl',\n            id: 'case_summary_edt',\n            ignoreNoChange: true,\n            updateEl: true,\n            completeOnEnter: true,\n            ignoreNoChange: true,\n            cancelOnEsc: true\n    });\n    case_summary_edt.on('complete', function(e,v,sv){\n        submitEdits('summary', v);\n    });\n\n// Tester Editing\n    var tester_edit_btn = new Ext.Button({\n        applyTo: 'tester_edit_btn_div',\n        id:'tester_edit_btn',\n        icon: 'extensions/Testopia/img/edit.png',\n        iconCls: 'img_button_16x',\n        tooltip: 'Edit Default Tester',\n        handler: function(){\n            Ext.getCmp('tester_edt').startEdit(Ext.get('tester_div'), '";
#line 509 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'default_tester', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "');\n        }\n    });\n    var tester_edt = new Ext.Editor(\n        new Testopia.User.Lookup({\n            hiddenName: 'tester',\n            value: tcase.tester\n        }),\n    {\n        alignment: 'tl-tl',\n        id: 'tester_edt',\n        updateEl: true,\n        completeOnEnter: true,\n        ignoreNoChange: true,\n        cancelOnEsc: true\n    });\n    tester_edt.on('complete', function(e,v){\n        submitEdits('tester', v);\n    });\n\n// Requirement Editing\n    var requirement_edit_btn = new Ext.Button({\n        applyTo: 'requirement_edit_btn_div',\n        id:'requirment_edit_btn',\n        icon: 'extensions/Testopia/img/edit.png',\n        iconCls: 'img_button_16x',\n        tooltip: 'Edit Requirement',\n        handler: function(){\n            Ext.getCmp('requirement_edt').startEdit(Ext.get('requirement_div'));\n        }\n    });\n    var requirement_edt = new Ext.Editor(\n        new Ext.form.TextField({\n            width: 300,\n            name: 'requirement'\n        }),\n        {\n            alignment: 'tl-tl',\n            id: 'requirement_edt',\n            ignoreNoChange: true,\n            updateEl: true,\n            completeOnEnter: true,\n            ignoreNoChange: true,\n            cancelOnEsc: true\n        }\n    );\n    requirement_edt.on('complete', function(e,v,sv){\n        submitEdits('requirement', v);\n    });\n\n// Time Editing\n    var time_edit_btn = new Ext.Button({\n        applyTo: 'time_edit_btn_div',\n        id:'time_edit_btn',\n        icon: 'extensions/Testopia/img/edit.png',\n        iconCls: 'img_button_16x',\n        tooltip: 'Edit Estimated Time',\n        handler: function(){\n            Ext.getCmp('time_edt').startEdit(Ext.get('estimated_time_div'));\n        }\n    });\n    var time_edt = new Ext.Editor(\n        new Ext.form.TextField({\n            width: 300,\n            name: 'estimated_time'\n        }),{\n            alignment: 'tl-tl',\n            id: 'time_edt',\n            ignoreNoChange: true,\n            updateEl: true,\n            completeOnEnter: true,\n            ignoreNoChange: true,\n            cancelOnEsc: true\n    });\n    time_edt.on('complete', function(e,v,sv){\n        submitEdits('estimated_time', v);\n    });\n\n// Combo Boxes\n    var pbox = new Testopia.TestCase.PriorityCombo({\n        hiddenName: 'priority',\n        transform: 'priority'\n    });\n    pbox.on('select', function(c,r,i){\n        submitEdits('priority', r.get('value'));\n    });\n\n    var sbox = new Testopia.TestCase.StatusListCombo({\n        hiddenName: 'status',\n        transform: 'status'\n    });\n    sbox.on('select', function(c,r,i){\n        submitEdits('status', r.get('value'));\n    });\n\n    var cbox = new Testopia.Category.Combo({\n        hiddenName: 'category',\n        transform: 'category'\n    });\n    cbox.on('select', function(c,r,i){\n        submitEdits('category', r.get('value'));\n    });";
    }
    
    $output .=  "\nExt.get('case_overview').show();\n});\n</script>\n";
#line 616 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    $output .=  $context->process('testopia/case/navigate.html.tmpl');
    $output .=  "\n\n<div id=\"case-body-div\"></div>\n\n<div id=\"case_overview\" style=\"visibility: hidden\">\n<table width=\"100%\">\n  <tbody align=\"left\">\n    <tr class=\"bz_row_header\">\n      <th colspan=\"3\">Case Summary</th>\n    </tr>\n    <tr class=\"bz_row_data\">\n      <td colspan=\"3\">\n        <table>\n          <tr style=\"width:100%;\">\n            <td><div id=\"case_summary_div\">";
#line 630 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'summary', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</div></td>\n            <td><div id=\"case_summary_edit_btn_div\"></div></td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n    <tr class=\"bz_row_header\">\n      <th>Author</th>\n      <th>Requirement</th>\n      <th>Created</th>\n      </tr>\n    <tr class=\"bz_row_data\">\n      <td><a href=\"mailto:";
#line 642 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'author', 0, 'email', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 642 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'author', 0, 'identity', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</a><br></td>\n      <td>\n        <table>\n          <tr style=\"width:100%;\">\n            <td><div id=\"requirement_div\">";
#line 646 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'requirement', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</div></td>\n            <td><div id=\"requirement_edit_btn_div\"></div></td>\n          </tr>\n        </table>\n      </td>\n      <td>";
#line 651 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('time')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'creation_date', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n      </tr>\n    <tr class=\"bz_row_header\">\n      <th>Tester</th>\n      <td><table><tr><th width=\"200\">Estimated Time</th><td width=\"20\"></td><th>Average Time</th></tr></table></td>\n      <th>Automated</th>\n      </tr>\n    <tr class=\"bz_row_data\">\n      <td>\n        <table>\n          <tr><td><a href=\"mailto:";
#line 661 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'default_tester', 0, 'email', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" id=\"tester_div\">";
#line 661 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'default_tester', 0, 'identity', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</a></td>\n          <td><div id=\"tester_edit_btn_div\"></div></td>\n          </tr>\n        </table>\n      </td>\n      <td>\n        <table>\n          <tr><td width=\"200\"><div id=\"estimated_time_div\">";
#line 668 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'estimated_time', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "&nbsp;(H:M:S)</div></td>\n          <td><div id=\"time_edit_btn_div\"></div></td>\n          <td>";
#line 670 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'calculate_average_time', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "&nbsp;(H:M:S)</td>\n          </tr>\n        </table>\n      </td>\n      <td>";
#line 674 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'isautomated', 0]) ? 'YES' : 'NO';
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n    </tr>\n    <tr class=\"bz_row_header\">\n      <th>Category</th>\n      <th>Priority</th>\n      <th>Status</th>\n\n      </tr>\n    <tr class=\"bz_row_data\">\n      <td>";
#line 690 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    if ($stash->get(['case', 0, 'canedit', 0])) {
#line 684 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'category', 'accesskey' => 'c', 'list' => $stash->get(['case', 0, 'get_category_list', 0]), 'default' => $stash->get(['case', 0, 'category', 0, 'name', 0])  } });
    }
    else {
#line 689 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'category', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    }
    
    $output .=  "\n      </td>\n      <td>\n        <table><tr><td>";
#line 701 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    if ($stash->get(['case', 0, 'canedit', 0])) {
#line 695 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'priority', 'accesskey' => 'p', 'list' => $stash->get(['case', 0, 'get_priority_list', 0]), 'default' => $stash->get(['case', 0, 'priority', 0])  } });
    }
    else {
#line 700 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'priority', 0]);
        
        &$_tt_filter($output);
    };
    
    }
    
    $output .=  "\n          </td><td> <img src='images/help.png' id=\"priority_help\" style=\"cursor:pointer\" onclick='window.open(\"testing_priorities.html\",\"Priority Definitions\",\"resizable=no, scrollbars=yes, width=550,height=420\");'/></td></tr>\n        </table>\n      </td>\n      <td>";
#line 712 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    if ($stash->get(['case', 0, 'canedit', 0])) {
#line 706 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    $output .=  $context->process('select', { 'sel' => { 'name' => 'status', 'accesskey' => 's', 'list' => $stash->get(['case', 0, 'get_status_list', 0]), 'default' => $stash->get(['case', 0, 'status', 0])  } });
    }
    else {
#line 711 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['case', 0, 'status', 0]);
        
        &$_tt_filter($output);
    };
    
    }
    
    $output .=  "\n      </td>\n    </tr>\n  </tbody>\n</table>\n</div>\n";
#line 719 "extensions/Testopia/template/en/default/testopia/case/show.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
