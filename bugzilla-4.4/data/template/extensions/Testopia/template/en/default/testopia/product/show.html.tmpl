use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1338251990',
        'name' => 'testopia/product/show.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n";
#line 21 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
#line 22 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $context->process('testopia/style.none.tmpl');
#line 23 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $context->process('testopia/blocks.html.tmpl');
#line 24 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $context->process('testopia/search/variables.none.tmpl');
    $output .=  "\n";
#line 26 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $stash->get(['javascript_urls', 0, 'push', [ 'extensions/Testopia/extjs/examples/ux/Portal.js' ]]);
#line 27 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $stash->get(['javascript_urls', 0, 'push', [ 'extensions/Testopia/extjs/examples/ux/PortalColumn.js' ]]);
#line 28 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $stash->get(['javascript_urls', 0, 'push', [ 'extensions/Testopia/extjs/examples/ux/Portlet.js' ]]);
    $output .=  "\n";
#line 30 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $stash->set('title', 'Testopia Product Dashboard');
#line 31 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl');
    $output .=  "\n\n\n<!-- ENDLIBS -->\n\n<style type=\"text/css\">\n.x-panel-body p {\n    margin:5px;\n}\n.x-column-layout-ct .x-panel {\n    margin-bottom:10px;\n}\n.x-column-layout-ct .x-panel-dd-spacer {\n    margin-bottom:10px;\n}\n.x-grid3-row .x-grid-row-checker {\n    width: 18px;\n}\n</style>\n<script type=\"text/javascript\">\nTestopia.userid = ";
#line 51 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['user', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ";\n\nExt.onReady(function(){\n    var product_id;\n    product_id = Ext.state.Manager.get('TESTOPIA_PRODUCT_ID');";
#line 58 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    if ($stash->get('product')) {
    $output .=  "\n    product_id = ";
#line 57 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $stash->get(['product', 0, 'id', 0]) || 0;
    $output .=  ";";
    }
    
    $output .=  "\n    var testopia_form = new Ext.form.BasicForm('testopia_helper_frm');\n    var t = new Testopia.Util.CascadeProductSelection();    \n    Ext.QuickTips.init();\n    \n    var pgrid = new Testopia.TestPlan.Grid({product_id: product_id},{id: 'product_plan_grid'});\n    var cgrid = new Testopia.TestCase.Grid({product_id: product_id},{id: 'product_case_grid'});\n    var rgrid = new Testopia.TestRun.Grid({product_id: product_id},{id: 'product_run_grid'});\n    var egrid = new Testopia.Environment.Grid({product_id: product_id});\n    var utag = new Testopia.Tags.ProductTags(\"User Tags\", \"user\");\n    var ptag = new Testopia.Tags.ProductTags(\"Product Tags\", \"product\", product_id);\n    var dtab = new Testopia.Search.SavedReportsList({\n        title: 'Dashboards',\n        id: 'dashboard_grid',\n        type: 3\n    });\n    var rtab = new Testopia.Search.SavedReportsList({\n        title: 'Reports',\n        id: 'reports_grid',\n        type: 1\n    });\n    var stab = new Testopia.Search.SavedReportsList({\n        title: 'Searches',\n        id: 'searches_grid',\n        type: 0\n    });\n    \n    var product_menu = new Ext.menu.Menu({\n        id: 'product_menu',\n        items:[{\n            text: 'New Test Plan',\n            handler: function(){\n                Testopia.TestPlan.NewPlanPopup(product_id);\n            }\n        },{\n            text: 'New Build',\n            handler: function(){\n                Ext.getCmp('object_panel').activate('build_grid');\n                Ext.getCmp('build_grid').newRecord();\n            }\n        },{\n            text: 'New Case Category',\n            handler: function(){\n                Ext.getCmp('object_panel').activate('category_grid');\n                Ext.getCmp('category_grid').newRecord();\n            }\n        },{\n            text: 'New Environment',\n            handler: function(){\n                window.location = 'tr_new_environment.cgi?product_id=' + Ext.getCmp('products_pane').getSelectionModel().getSelectedNode().id;\n            }\n        },{\n            text: 'Import',\n            menu: [{\n                text: 'Test Plans from XML',\n                handler: function(){\n                    if(!product_id){\n                        alert('Please select a product first!');\n                        return;\n                    }\n                    Testopia.TestPlan.Import({product_id: Ext.getCmp('products_pane').getSelectionModel().getSelectedNode().id});             \n                }\n            }]\n        },{\n            text: 'Export',\n            menu: [{\n                text: 'Test Plans as XML',\n                handler: function(){\n                    if(!product_id){\n                        alert('Please select a product first!');\n                        return;\n                    }\n                    window.location = 'tr_list_plans.cgi?ctype=xml&viewall=1&product_id=' + Ext.getCmp('products_pane').getSelectionModel().getSelectedNode().id;             \n                }\n            }]\n        }]\n    });\n    var search_menu = new Ext.menu.Menu({\n        id: 'search_menu',\n        items:[{\n            text: 'Test Plan Search',\n            handler: function(){\n                Testopia.Search.Popup('plan');\n            }\n        },{\n            text: 'Test Case Search',\n            handler: function(){\n                Testopia.Search.Popup('case');\n            }\n        },{\n            text: 'Test Run Search',\n            handler: function(){\n                Testopia.Search.Popup('run');\n            }\n        },{\n            text: 'Test Results Search',\n            handler: function(){\n                Testopia.Search.Popup('caserun');\n            }\n        }]\n    });\n\n    var report_menu = new Ext.menu.Menu({\n        id: 'report_menu',\n        items: [{\n            text: 'Tabular Reports',\n            menu: {\n                items:[{\n                    text: 'Test Plan Report',\n                    handler: function(){\n                        Testopia.Search.Popup('plan', {report: true});\n                    }\n                },{\n                    text: 'Test Case Report',\n                    handler: function(){\n                        Testopia.Search.Popup('case', {report: true});\n                    }\n                },{\n                    text: 'Test Run Report',\n                    handler: function(){\n                        Testopia.Search.Popup('run', {report: true});\n                    }\n                },{\n                    text: 'Test Results Report',\n                    handler: function(){\n                        Testopia.Search.Popup('caserun', {report: true});\n                    }\n                }]\n            }\n        }]\n    });\n    \n    var product_toolbar = new Ext.Toolbar({\n        items:[{\n            text: 'File',\n            menu: product_menu\n        },{\n            text: 'Search',\n            menu: search_menu\n        },{\n            text: 'Reports',\n            menu: report_menu\n        }]\n    });\n    \n    var productView = new Ext.Panel({\n        layout: 'border',\n        height: 680,\n        title:'Product: ";
#line 206 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['product', 0, 'name', 0]) || '(Please select a product from the tree)';
        
        &$_tt_filter($output);
    };
    
    $output .=  "',\n        monitorResize: true,\n        split: true,\n        id:'product_view',\n        applyTo: 'productcontainer',\n        tbar: product_toolbar,\n        items:[{\n            region: 'west',\n            split: true,\n            title: 'Products',\n            width: 212,\n            maxsize: 400,\n            id: 'products_pane',\n            xtype: 'treepanel',\n            loader: new Ext.tree.TreeLoader({\n              dataUrl:'tr_quicksearch.cgi',\n              baseParams: {action: 'getclassificationstree'}\n            }),\n            root: new Ext.tree.AsyncTreeNode({\n              text: 'Classifications',\n              dragable: false,\n              id: 'classes',\n              expanded: true\n            }),\n            animate: true,\n            enableDD: false,\n            rootVisible: true,\n            singleExpand:true,\n            collapsible: true,\n            autoScroll: true,\n            listeners: {\n                'click': function(node, e){\n                    if(node.isLeaf()){\n                        var tabs = Ext.getCmp('object_panel').items;\n                        for (i in tabs.items){\n                            if (tabs.items[i].store){\n                                tabs.items[i].store.removeAll();\n                                tabs.items[i].store.baseParams.product_id = node.id; \n                            }\n                            if (tabs.items[i].params){\n                                tabs.items[i].params.product_id = node.id;\n                            }\n                            tabs.items[i].product_id = node.id;\n                            if (Ext.getCmp('edit_build_btn')){\n                                Ext.getCmp('edit_build_btn').enable();\n                                Ext.getCmp('add_build_btn').enable();\n                            }\n                            if (Ext.getCmp('edit_category_btn')){\n                                Ext.getCmp('edit_category_btn').enable();\n                                Ext.getCmp('add_category_btn').enable();\n                            }\n                        }\n                        \n                        product_id = node.id;\n                        p = Ext.getCmp('object_panel').getActiveTab();\n                        if (p && p.store){\n                            p.store.load();\n                        }\n                        Ext.getCmp('product_view').setTitle('Product: ' + node.text);\n                        Ext.getCmp('producttags').store.load({params: {product_id: product_id}});\n                        document.cookie = \"TESTOPIA_PRODUCT_ID=\" + product_id + \"; path=";
#line 266 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $stash->get('cookiepath');
    $output .=  "; expires=Fri, 01 Jan 2038 00:00:04 GMT\";\n                    }\n                },\n                'contextmenu': function(node, e){\n                    node.select();\n                    e.stopEvent();\n                    product_menu.showAt(e.getXY());\n                }\n            }\n        },{\n            region: 'east',\n            width: '250',\n            split: true,\n            id:'prod_tag_panel',\n            enableTabScroll: true,\n            xtype: 'tabpanel',\n            listeners: { \n              'tabchange': function(){\n                    Ext.state.Manager.set('product_tabs_tab', Ext.getCmp('prod_tag_panel').getActiveTab().getId());\n              }\n            },\n            items: [ \n                dtab, rtab, stab, utag, ptag\n            ]\n        },{\n            region: 'center',\n            id: 'object_panel',\n            split: true,\n            xtype: 'tabpanel',\n            enableTabScroll: true,\n            listeners: { \n              'tabchange': function(){\n                    Ext.state.Manager.set('product_active_tab', Ext.getCmp('object_panel').getActiveTab().getId());\n              }\n            },\n            items: [new Testopia.Search.DashboardPanel({}),\n                pgrid, \n                cgrid, \n                rgrid, \n                new Testopia.Build.Grid(product_id),\n                new Testopia.Category.Grid(product_id), \n                egrid\n            ]\n    \n        }]\n    });\n    Ext.getCmp('dashboardpanel').on('render', function(){\n        Ext.getCmp('dashboardpanel').getTopToolbar().add({\n            xtype: 'button',\n            id: 'save_dashboard_btn',\n            icon: 'extensions/Testopia/img/save.png',\n            iconCls: 'img_button_16x',\n            tooltip: 'Save this dashboard',\n            handler: function(b,e){\n                Testopia.Search.save('dashboard', Testopia.Search.dashboard_urls);\n            }\n        });\n    });";
#line 336 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    if ($stash->get('product')) {
    $output .=  "\n    Ext.getCmp('products_pane').getLoader().on('load', function(l,n,r){\n        if (n.isExpanded() && n.id != 'classes'){\n            return;\n        }\n        var tree = Ext.getCmp('products_pane');\n        var cnode = tree.getNodeById('c";
#line 330 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['product', 0, 'classification_id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "');\n        cnode.expand(1,true,function(n){\n            tree.getNodeById('";
#line 332 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['product', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "').select();\n        });\n        \n    });";
    }
    
#line 389 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    if ($stash->get('dashboard') && $stash->get(['user', 0, 'in_group', [ 'Testers' ]])) {
    $output .=  "\n    var dstore = new Ext.data.JsonStore({\n        url: 'tr_query.cgi',\n        baseParams: {action: 'get_saved_searches', type: 3, userid: ";
#line 340 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('userid') || $stash->get(['user', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "},\n        root: 'searches',\n        fields: [\"name\",\"query\",\"author\",\"type\"],\n        listeners: {'exception': Testopia.Util.loadError,\n            'load': function(obj, rs){\n            Ext.getCmp('object_panel').setActiveTab('dashboardpanel');\n            var current_col = 'dashboard_leftcol';\n            var query;\n            var r;\n            for (var i in rs){\n                if(typeof rs[i] == 'function'){\n                    continue;\n                }\n                if (rs[i].get('name') == '";
#line 353 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('dashboard');
        
        &$_tt_filter($output);
    };
    
    $output .=  "'){\n                    r = rs[i];\n                    break;\n                }\n            }\n            var qs = r.get('query').split('::>');\n            i = 0;\n            for (i in qs){ \n                if(typeof qs[i] == 'function'){\n                    continue;\n                }\n                var p = Testopia.Util.urlQueryToJSON(qs[i]);\n                var t;\n                typeof p.qname == 'object' ? t = p.qname[0] : t = p.qname;\n                \n                var newPortlet = new Ext.ux.Portlet({\n                    title: t || '',\n                    id: r.get('name') + i,\n                    closable: true,\n                    autoScroll: true,\n                    tools: PortalTools,\n                    url: qs[i]\n                });\n                \n                Ext.getCmp(current_col).add(newPortlet);\n                Ext.getCmp(current_col).doLayout();\n                Testopia.Search.dashboard_urls.push(qs[i]);\n                newPortlet.load({\n                    url: qs[i]\n                });\n                current_col = current_col == 'dashboard_leftcol' ? 'dashboard_rightcol' : 'dashboard_leftcol';\n            }        \n        }}\n    });\n    dstore.load();\n";
    }
    
    $output .=  "\n    var s = Testopia.Util.urlQueryToJSON(window.location.search);\n    if (s.tab){\n        Ext.getCmp('object_panel').activate('product_' + s.tab + '_grid');\n    }\n    else{\n        Ext.getCmp('object_panel').activate(Ext.state.Manager.get('product_active_tab', 0));\n    }\n    \n    Ext.getCmp('prod_tag_panel').activate(Ext.state.Manager.get('product_tabs_tab', 0));\n";
#line 402 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    if ($stash->get('search')) {
    $output .=  "\n    Testopia.Search.Popup('case');";
    }
    
    $output .=  "\n});\n\n</script>\n<style type=\"text/css\">\n.x-menu-item{\n    text-decoration: none;\n}\n</style>\n\n<div id=\"productcontainer\"></div>\n";
#line 414 "extensions/Testopia/template/en/default/testopia/product/show.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
